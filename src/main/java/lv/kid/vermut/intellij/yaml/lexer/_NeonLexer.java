/* The following code was generated by JFlex 1.4.3 on 3/26/16 4:38 PM */

package lv.kid.vermut.intellij.yaml.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import lv.kid.vermut.intellij.pgp.PgpToken;

import static lv.kid.vermut.intellij.yaml.lexer.NeonTokenTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/26/16 4:38 PM from the specification file
 * <tt>/Users/admin/IdeaProjects/intellij-ansible/src/main/java/lv/kid/vermut/intellij/yaml/lexer/neon.flex</tt>
 */
public class _NeonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ANSIBLE_VAULT_FILE = 8;
  public static final int IN_ASSIGNMENT_LITERAL = 6;
  public static final int IN_LITERAL = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_ASSIGNMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 1, 2, 2, 3, 3, 4, 4, 5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\17\1\12\1\5\2\22\1\20\16\17\4\50\1\12\1\41\1\3" +
                  "\1\7\1\24\1\11\1\0\1\1\1\0\1\43\2\0\1\2\1\10" +
                  "\2\0\12\16\1\42\2\0\1\40\1\45\2\0\1\25\1\31\2\15" +
                  "\1\33\3\15\1\30\2\15\1\32\1\15\1\26\4\15\1\27\1\37" +
                  "\1\36\1\35\4\15\1\47\1\4\1\44\1\0\1\34\1\13\32\15" +
                  "\1\14\1\46\1\6\1\0\6\16\1\23\32\16\2\0\4\15\4\0" +
                  "\1\15\2\0\1\16\7\0\1\15\4\0\1\15\5\0\27\15\1\0" +
                  "\37\15\1\0\u01ca\15\4\0\14\15\16\0\5\15\7\0\1\15\1\0" +
                  "\1\15\21\0\160\16\5\15\1\0\2\15\2\0\4\15\10\0\1\15" +
                  "\1\0\3\15\1\0\1\15\1\0\24\15\1\0\123\15\1\0\213\15" +
                  "\1\0\5\16\2\0\236\15\11\0\46\15\2\0\1\15\7\0\47\15" +
                  "\7\0\1\15\1\0\55\16\1\0\1\16\1\0\2\16\1\0\2\16" +
                  "\1\0\1\16\10\0\33\15\5\0\3\15\15\0\5\16\6\0\1\15" +
                  "\4\0\13\16\5\0\53\15\37\16\4\0\2\15\1\16\143\15\1\0" +
                  "\1\15\10\16\1\0\6\16\2\15\2\16\1\0\4\16\2\15\12\16" +
                  "\3\15\2\0\1\15\17\0\1\16\1\15\1\16\36\15\33\16\2\0" +
                  "\131\15\13\16\1\15\16\0\12\16\41\15\11\16\2\15\4\0\1\15" +
                  "\5\0\26\15\4\16\1\15\11\16\1\15\3\16\1\15\5\16\22\0" +
                  "\31\15\3\16\104\0\1\15\1\0\13\15\67\0\33\16\1\0\4\16" +
                  "\66\15\3\16\1\15\22\16\1\15\7\16\12\15\2\16\2\0\12\16" +
                  "\1\0\7\15\1\0\7\15\1\0\3\16\1\0\10\15\2\0\2\15" +
                  "\2\0\26\15\1\0\7\15\1\0\1\15\3\0\4\15\2\0\1\16" +
                  "\1\15\7\16\2\0\2\16\2\0\3\16\1\15\10\0\1\16\4\0" +
                  "\2\15\1\0\3\15\2\16\2\0\12\16\4\15\7\0\1\15\5\0" +
                  "\3\16\1\0\6\15\4\0\2\15\2\0\26\15\1\0\7\15\1\0" +
                  "\2\15\1\0\2\15\1\0\2\15\2\0\1\16\1\0\5\16\4\0" +
                  "\2\16\2\0\3\16\3\0\1\16\7\0\4\15\1\0\1\15\7\0" +
                  "\14\16\3\15\1\16\13\0\3\16\1\0\11\15\1\0\3\15\1\0" +
                  "\26\15\1\0\7\15\1\0\2\15\1\0\5\15\2\0\1\16\1\15" +
                  "\10\16\1\0\3\16\1\0\3\16\2\0\1\15\17\0\2\15\2\16" +
                  "\2\0\12\16\1\0\1\15\17\0\3\16\1\0\10\15\2\0\2\15" +
                  "\2\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\2\0\1\16" +
                  "\1\15\7\16\2\0\2\16\2\0\3\16\10\0\2\16\4\0\2\15" +
                  "\1\0\3\15\2\16\2\0\12\16\1\0\1\15\20\0\1\16\1\15" +
                  "\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15" +
                  "\1\0\2\15\3\0\2\15\3\0\3\15\3\0\14\15\4\0\5\16" +
                  "\3\0\3\16\1\0\4\16\2\0\1\15\6\0\1\16\16\0\12\16" +
                  "\11\0\1\15\7\0\3\16\1\0\10\15\1\0\3\15\1\0\27\15" +
                  "\1\0\12\15\1\0\5\15\3\0\1\15\7\16\1\0\3\16\1\0" +
                  "\4\16\7\0\2\16\1\0\2\15\6\0\2\15\2\16\2\0\12\16" +
                  "\22\0\2\16\1\0\10\15\1\0\3\15\1\0\27\15\1\0\12\15" +
                  "\1\0\5\15\2\0\1\16\1\15\7\16\1\0\3\16\1\0\4\16" +
                  "\7\0\2\16\7\0\1\15\1\0\2\15\2\16\2\0\12\16\1\0" +
                  "\2\15\17\0\2\16\1\0\10\15\1\0\3\15\1\0\51\15\2\0" +
                  "\1\15\7\16\1\0\3\16\1\0\4\16\1\15\10\0\1\16\10\0" +
                  "\2\15\2\16\2\0\12\16\12\0\6\15\2\0\2\16\1\0\22\15" +
                  "\3\0\30\15\1\0\11\15\1\0\1\15\2\0\7\15\3\0\1\16" +
                  "\4\0\6\16\1\0\1\16\1\0\10\16\22\0\2\16\15\0\60\15" +
                  "\1\16\2\15\7\16\4\0\10\15\10\16\1\0\12\16\47\0\2\15" +
                  "\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\6\0\4\15" +
                  "\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15" +
                  "\1\0\4\15\1\16\2\15\6\16\1\0\2\16\1\15\2\0\5\15" +
                  "\1\0\1\15\1\0\6\16\2\0\12\16\2\0\4\15\40\0\1\15" +
                  "\27\0\2\16\6\0\12\16\13\0\1\16\1\0\1\16\1\0\1\16" +
                  "\4\0\2\16\10\15\1\0\44\15\4\0\24\16\1\0\2\16\5\15" +
                  "\13\16\1\0\44\16\11\0\1\16\71\0\53\15\24\16\1\15\12\16" +
                  "\6\0\6\15\4\16\4\15\3\16\1\15\3\16\2\15\7\16\3\15" +
                  "\4\16\15\15\14\16\1\15\17\16\2\0\46\15\1\0\1\15\5\0" +
                  "\1\15\2\0\53\15\1\0\u014d\15\1\0\4\15\2\0\7\15\1\0" +
                  "\1\15\1\0\4\15\2\0\51\15\1\0\4\15\2\0\41\15\1\0" +
                  "\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\17\15\1\0" +
                  "\71\15\1\0\4\15\2\0\103\15\2\0\3\16\40\0\20\15\20\0" +
                  "\125\15\14\0\u026c\15\2\0\21\15\1\0\32\15\5\0\113\15\3\0" +
                  "\3\15\17\0\15\15\1\0\4\15\3\16\13\0\22\15\3\16\13\0" +
                  "\22\15\2\16\14\0\15\15\1\0\3\15\1\0\2\16\14\0\64\15" +
                  "\40\16\3\0\1\15\3\0\2\15\1\16\2\0\12\16\41\0\3\16" +
                  "\2\0\12\16\6\0\130\15\10\0\51\15\1\16\1\15\5\0\106\15" +
                  "\12\0\35\15\3\0\14\16\4\0\14\16\12\0\12\16\36\15\2\0" +
                  "\5\15\13\0\54\15\4\0\21\16\7\15\2\16\6\0\12\16\46\0" +
                  "\27\15\5\16\4\0\65\15\12\16\1\0\35\16\2\0\13\16\6\0" +
                  "\12\16\15\0\1\15\130\0\5\16\57\15\21\16\7\15\4\0\12\16" +
                  "\21\0\11\16\14\0\3\16\36\15\15\16\2\15\12\16\54\15\16\16" +
                  "\14\0\44\15\24\16\10\0\12\16\3\0\3\15\12\16\44\15\122\0" +
                  "\3\16\1\0\25\16\4\15\1\16\4\15\3\16\2\15\11\0\300\15" +
                  "\47\16\25\0\4\16\u0116\15\2\0\6\15\2\0\46\15\2\0\6\15" +
                  "\2\0\10\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\37\15" +
                  "\2\0\65\15\1\0\7\15\1\0\1\15\3\0\3\15\1\0\7\15" +
                  "\3\0\4\15\2\0\6\15\4\0\15\15\5\0\3\15\1\0\7\15" +
                  "\16\0\5\16\30\0\2\21\5\16\20\0\2\15\23\0\1\15\13\0" +
                  "\5\16\5\0\6\16\1\0\1\15\15\0\1\15\20\0\15\15\3\0" +
                  "\33\15\25\0\15\16\4\0\1\16\3\0\14\16\21\0\1\15\4\0" +
                  "\1\15\2\0\12\15\1\0\1\15\3\0\5\15\6\0\1\15\1\0" +
                  "\1\15\1\0\1\15\1\0\4\15\1\0\13\15\2\0\4\15\5\0" +
                  "\5\15\4\0\1\15\21\0\51\15\u0a77\0\57\15\1\0\57\15\1\0" +
                  "\205\15\6\0\4\15\3\16\2\15\14\0\46\15\1\0\1\15\5\0" +
                  "\1\15\2\0\70\15\7\0\1\15\17\0\1\16\27\15\11\0\7\15" +
                  "\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15" +
                  "\1\0\7\15\1\0\7\15\1\0\40\16\57\0\1\15\u01d5\0\3\15" +
                  "\31\0\11\15\6\16\1\0\5\15\2\0\5\15\4\0\126\15\2\0" +
                  "\2\16\2\0\3\15\1\0\132\15\1\0\4\15\5\0\51\15\3\0" +
                  "\136\15\21\0\33\15\65\0\20\15\u0200\0\u19b6\15\112\0\u51cd\15\63\0" +
                  "\u048d\15\103\0\56\15\2\0\u010d\15\3\0\20\15\12\16\2\15\24\0" +
                  "\57\15\1\16\4\0\12\16\1\0\31\15\7\0\1\16\120\15\2\16" +
                  "\45\0\11\15\2\0\147\15\2\0\4\15\1\0\4\15\14\0\13\15" +
                  "\115\0\12\15\1\16\3\15\1\16\4\15\1\16\27\15\5\16\20\0" +
                  "\1\15\7\0\64\15\14\0\2\16\62\15\21\16\13\0\12\16\6\0" +
                  "\22\16\6\15\3\0\1\15\4\0\12\16\34\15\10\16\2\0\27\15" +
                  "\15\16\14\0\35\15\3\0\4\16\57\15\16\16\16\0\1\15\12\16" +
                  "\46\0\51\15\16\16\11\0\3\15\1\16\10\15\2\16\2\0\12\16" +
                  "\6\0\27\15\3\0\1\15\1\16\4\0\60\15\1\16\1\15\3\16" +
                  "\2\15\2\16\5\15\2\16\1\15\1\16\1\15\30\0\3\15\2\0" +
                  "\13\15\5\16\2\0\3\15\2\16\12\0\6\15\2\0\6\15\2\0" +
                  "\6\15\11\0\7\15\1\0\7\15\221\0\43\15\10\16\1\0\2\16" +
                  "\2\0\12\16\6\0\u2ba4\15\14\0\27\15\4\0\61\15\u2104\0\u016e\15" +
                  "\2\0\152\15\46\0\7\15\14\0\5\15\5\0\1\15\1\16\12\15" +
                  "\1\0\15\15\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15" +
                  "\1\0\154\15\41\0\u016b\15\22\0\100\15\2\0\66\15\50\0\15\15" +
                  "\3\0\20\16\20\0\7\16\14\0\2\15\30\0\3\15\31\0\1\15" +
                  "\6\0\5\15\1\0\207\15\2\0\1\16\4\0\1\15\13\0\12\16" +
                  "\7\0\32\15\4\0\1\15\1\0\32\15\13\0\131\15\3\0\6\15" +
                  "\2\0\6\15\2\0\6\15\2\0\3\15\3\0\2\15\3\0\2\15" +
                  "\22\0\3\16\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\4\0\1\1\1\0\2\2\1\3\1\2\1\4\1\5" +
                  "\1\6\2\2\1\7\1\10\1\11\2\2\1\12\1\10" +
                  "\1\2\1\13\2\14\1\15\1\16\1\17\2\20\1\17" +
                  "\2\20\1\21\2\22\1\23\1\22\1\23\1\22\1\24" +
                  "\1\23\1\25\1\26\1\27\3\26\1\1\2\27\1\30" +
                  "\1\31\1\0\1\32\2\0\1\33\1\34\1\0\1\34" +
                  "\1\35\1\0\1\36\1\0\1\16\2\37\1\16\1\33" +
                  "\1\40\1\41\1\0\1\41\2\0\1\42\2\43\1\0" +
                  "\1\44\2\0\1\45\1\46\1\47\4\0\1\50\2\0" +
                  "\1\51\12\0\1\52";

  private static int [] zzUnpackAction() {
    int[] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f" +
                  "\0\366\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u019a\0\u0215" +
                  "\0\366\0\u023e\0\u0267\0\u0290\0\366\0\u02b9\0\u02e2\0\366" +
                  "\0\366\0\u030b\0\366\0\u0334\0\u035d\0\366\0\u0386\0\u03af" +
                  "\0\u03d8\0\u0401\0\u042a\0\366\0\u0453\0\366\0\u047c\0\u04a5" +
                  "\0\u04a5\0\u04ce\0\u04f7\0\366\0\366\0\366\0\u0520\0\u0549" +
                  "\0\u0572\0\u059b\0\u05c4\0\u059b\0\366\0\366\0\u011f\0\366" +
                  "\0\u0148\0\u05ed\0\366\0\366\0\u0616\0\u063f\0\366\0\u0267" +
                  "\0\366\0\u0668\0\u0691\0\366\0\u06ba\0\u06e3\0\u06e3\0\366" +
                  "\0\366\0\u0386\0\u0386\0\u03d8\0\u0401\0\366\0\u070c\0\366" +
                  "\0\u0453\0\366\0\u047c\0\u0735\0\366\0\366\0\366\0\u0520" +
                  "\0\u0549\0\u0572\0\u075e\0\u0787\0\u07b0\0\u07d9\0\366\0\u0802" +
                  "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a" +
                  "\0\u0973\0\u0267";

  private static int [] zzUnpackRowMap() {
    int[] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\7\1\10\1\11\1\12\1\7\1\13\1\14\1\15" +
                  "\1\16\1\17\1\20\1\21\1\22\1\23\1\7\2\21" +
                  "\1\7\1\21\1\7\1\24\13\23\1\25\1\26\1\27" +
                  "\1\7\1\30\1\31\1\32\1\33\1\21\1\7\1\10" +
                  "\1\11\1\12\1\7\1\13\1\14\1\15\1\16\1\34" +
                  "\1\20\1\21\1\22\1\23\1\7\2\21\1\7\1\21" +
                  "\1\7\1\24\13\23\1\25\1\26\1\27\1\7\1\30" +
                  "\1\31\1\32\1\33\1\21\2\35\1\36\2\35\1\36" +
                  "\1\37\2\35\1\40\1\41\1\35\1\42\2\35\2\36" +
                  "\1\35\1\36\17\35\1\43\1\35\1\36\3\35\1\36" +
                  "\1\44\1\45\1\46\1\47\1\44\1\46\1\50\1\46" +
                  "\1\44\1\51\1\52\1\46\1\53\2\44\2\46\1\44" +
                  "\1\46\15\44\1\54\1\46\2\44\1\46\2\44\2\46" +
                  "\5\55\1\56\1\57\2\55\1\57\1\60\1\55\1\61" +
                  "\3\62\1\63\2\56\1\64\14\62\1\65\10\55\5\66" +
                  "\1\0\43\66\51\0\1\67\1\70\1\0\2\67\1\0" +
                  "\43\67\2\71\1\0\1\70\1\72\2\0\5\71\1\0" +
                  "\34\71\12\0\1\13\44\0\1\73\42\0\5\15\1\0" +
                  "\43\15\5\0\1\74\2\0\1\75\1\0\1\74\5\0" +
                  "\1\76\3\74\37\0\1\20\47\0\1\77\2\0\1\77" +
                  "\51\0\3\100\3\0\15\100\1\101\25\0\3\100\3\0" +
                  "\2\100\1\102\12\100\1\101\25\0\1\103\6\0\14\103" +
                  "\13\0\1\104\2\0\2\104\3\0\1\104\5\0\1\105" +
                  "\3\104\17\0\2\104\16\0\1\32\36\0\5\106\1\0" +
                  "\1\107\42\106\2\35\1\0\2\35\2\0\3\35\1\0" +
                  "\1\35\1\0\2\35\2\0\1\35\1\0\17\35\1\0" +
                  "\1\35\1\0\3\35\7\0\1\110\42\0\2\35\1\0" +
                  "\2\35\1\0\1\110\3\35\1\0\1\35\1\0\2\35" +
                  "\2\0\1\35\1\0\17\35\1\0\1\35\1\0\3\35" +
                  "\1\0\2\111\1\0\2\111\1\0\1\112\1\0\1\111" +
                  "\1\113\1\114\1\111\1\115\2\111\2\0\1\111\1\0" +
                  "\17\111\1\0\1\111\1\0\3\111\12\0\1\110\2\0" +
                  "\1\110\36\0\1\116\2\0\2\116\3\0\1\116\5\0" +
                  "\1\117\3\120\17\0\2\116\4\0\1\121\1\122\1\0" +
                  "\2\121\1\0\43\121\2\123\1\0\1\122\1\124\2\0" +
                  "\5\123\1\0\34\123\6\0\1\125\54\0\1\52\47\0" +
                  "\1\126\2\0\1\126\42\0\1\127\50\0\1\130\2\0" +
                  "\1\130\1\131\1\0\1\132\1\133\6\0\14\133\22\0" +
                  "\1\127\2\0\1\127\51\0\3\62\3\0\15\62\16\0" +
                  "\1\56\43\0\5\71\1\0\43\71\10\0\1\134\45\0" +
                  "\1\74\60\0\3\100\3\0\3\100\1\135\11\100\1\101" +
                  "\25\0\3\103\3\0\15\103\16\0\1\104\43\0\5\106" +
                  "\1\0\43\106\5\0\1\120\43\0\5\123\1\0\43\123" +
                  "\12\0\1\136\2\0\3\133\3\0\15\133\1\137\10\0" +
                  "\5\134\1\0\43\134\15\0\3\100\3\0\4\100\1\140" +
                  "\10\100\1\101\22\0\1\136\25\0\1\137\25\0\3\100" +
                  "\3\0\5\100\1\141\7\100\1\101\25\0\3\100\3\0" +
                  "\6\100\1\142\6\100\1\101\25\0\3\100\3\0\7\100" +
                  "\1\143\5\100\1\101\25\0\3\100\3\0\10\100\1\144" +
                  "\4\100\1\101\25\0\3\100\3\0\11\100\1\145\3\100" +
                  "\1\101\25\0\3\100\3\0\12\100\1\146\2\100\1\101" +
                  "\25\0\3\100\3\0\2\100\1\147\12\100\1\101\25\0" +
                  "\3\100\3\0\13\100\1\150\1\100\1\101\25\0\3\100" +
                  "\3\0\7\100\1\151\5\100\1\101\25\0\3\100\3\0" +
                  "\14\100\1\152\1\101\10\0";

  private static int [] zzUnpackTrans() {
    int[] result = new int[2460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\4\0\1\1\1\0\1\11\1\1\1\11\7\1\1\11" +
                  "\3\1\1\11\2\1\2\11\1\1\1\11\2\1\1\11" +
                  "\5\1\1\11\1\1\1\11\5\1\3\11\6\1\2\11" +
                  "\1\0\1\11\2\0\2\11\1\0\1\1\1\11\1\0" +
                  "\1\11\1\0\1\1\1\11\3\1\2\11\1\0\1\1" +
                  "\2\0\1\11\1\1\1\11\1\0\1\11\2\0\3\11" +
                  "\4\0\1\1\2\0\1\11\12\0\1\1";

  private static int [] zzUnpackAttribute() {
    int[] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int yycolumn = 0;
    private int a = 0;
	private void retryInState(int newState) {
        yybegin(newState);
        yypushback(yylength());
	}


  public _NeonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _NeonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { a=305;retryInState(YYINITIAL);
          }
        case 43:
          break;
        case 29: 
          { a=111;return NEON_LBRACE_JINJA;
          }
        case 44:
          break;
        case 40: 
          { return NEON_HEADER;
          }
        case 45:
          break;
        case 38: 
          { a=411;return NEON_LBRACE_JINJA;
          }
        case 46:
          break;
        case 30: 
          { a=2;retryInState(IN_ASSIGNMENT);
          }
        case 47:
          break;
        case 39: 
          { a=5011;retryInState(IN_ASSIGNMENT);
          }
        case 48:
          break;
        case 19: 
          { a=406;retryInState(YYINITIAL);
          }
        case 49:
          break;
        case 2: 
          { yybegin(IN_LITERAL);
        return NEON_LITERAL;
          }
        case 50:
          break;
        case 6: 
          { return NEON_COMMENT;
          }
        case 51:
          break;
        case 13: 
          { return NEON_LBRACE_SQUARE;
          }
        case 52:
          break;
        case 28: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return NEON_ARRAY_BULLET;
          }
        case 53:
          break;
        case 9: 
          { return NEON_LBRACE_CURLY;
          }
        case 54:
          break;
        case 14: 
          { return NEON_TAG;
          }
        case 55:
          break;
        case 18: 
          { a=405;retryInState(IN_ASSIGNMENT_LITERAL);
        return NEON_LITERAL;
          }
        case 56:
          break;
        case 8: 
          { return NEON_UNKNOWN;
          }
        case 57:
          break;
        case 34: 
          { a=304;retryInState(YYINITIAL);
          }
        case 58:
          break;
        case 20: 
          { a=403;return NEON_WHITESPACE;
          }
        case 59:
          break;
        case 10: 
          { return NEON_ASSIGNMENT;
          }
        case 60:
          break;
        case 31: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return NEON_COLON;
          }
        case 61:
          break;
        case 5: 
          { return NEON_RBRACE_CURLY;
          }
        case 62:
          break;
        case 27: 
          { a=112;return NEON_RBRACE_JINJA;
          }
        case 63:
          break;
        case 36: 
          { a=401;return NEON_STRING;
          }
        case 64:
          break;
        case 37: 
          { a=412;return NEON_RBRACE_JINJA;
          }
        case 65:
          break;
        case 16: 
          { a=307;retryInState(YYINITIAL);
          }
        case 66:
          break;
        case 33: 
          { a=303;
          }
        case 67:
          break;
        case 17: 
          { a=306;
          }
        case 68:
          break;
        case 7: 
          { return NEON_WHITESPACE;
          }
        case 69:
          break;
        case 4: 
          { return NEON_INDENT;
          }
        case 70:
          break;
        case 11: 
          { return NEON_RBRACE_SQUARE;
          }
        case 71:
          break;
        case 41: 
          { a=501; retryInState(IN_ASSIGNMENT);
          }
        case 72:
          break;
        case 22: 
          { a=505;
          }
        case 73:
          break;
        case 21: 
          { a=402;return NEON_ASSIGNMENT;
          }
        case 74:
          break;
        case 24: 
          { a=502; retryInState(IN_ASSIGNMENT);
          }
        case 75:
          break;
        case 26: 
          { return NEON_STRING;
          }
        case 76:
          break;
        case 3: 
          { return NEON_ITEM_DELIMITER;
          }
        case 77:
          break;
        case 15: 
          { a=302;
          }
        case 78:
          break;
        case 32: 
          { a=3011;retryInState(YYINITIAL);
          }
        case 79:
          break;
        case 42: {
          retryInState(ANSIBLE_VAULT_FILE);
        }
        case 80:
          break;
        case 12: 
          { return NEON_LINE_CONTINUATION;
          }
        case 81:
          break;
        case 1: 
          { a=504;
          }
        case 82:
          break;
        case 25: {
        }
        case 83:
          break;
        case 23: 
          { a=503;retryInState(IN_ASSIGNMENT);
          }
        case 84:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
              case ANSIBLE_VAULT_FILE: {
                return PgpToken.INSTANCE;
              }
              case 107:
                break;
              default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
