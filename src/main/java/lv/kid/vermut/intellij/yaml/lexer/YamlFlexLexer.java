/* The following code was generated by JFlex 1.4.3 on 1/2/16 5:04 PM */

package lv.kid.vermut.intellij.yaml.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;

import static lv.kid.vermut.intellij.yaml.lexer.YamlTokenTypes.*;

// import org.yaml.snakeyaml.util.ArrayStack;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/2/16 5:04 PM from the specification file
 * <tt>C:/Users/VermutMac/IdeaProjects/intellij-ansible/src/main/java/lv/kid/vermut/intellij/yaml/lexer/yaml.flex</tt>
 */
public class YamlFlexLexer implements FlexLexer {
  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int IN_BLOCK_SCALAR = 4;
  public static final int IN_PLAIN = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 1, 2,  2, 3, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\1\15\10\0\1\6\1\2\2\11\1\10\22\0\1\6\1\27\1\31" +
                  "\1\1\1\0\1\5\1\26\1\31\2\0\1\25\1\13\1\22\1\3" +
                  "\1\4\1\0\12\12\1\24\3\0\1\30\1\23\1\7\32\0\1\16" +
                  "\1\0\1\17\2\0\1\7\32\0\1\20\1\30\1\21\7\0\1\14" +
                  "\u05da\0\12\12\206\0\12\12\306\0\12\12\u019c\0\12\12\166\0\12\12" +
                  "\166\0\12\12\166\0\12\12\166\0\12\12\166\0\12\12\166\0\12\12" +
                  "\166\0\12\12\166\0\12\12\340\0\12\12\166\0\12\12\106\0\12\12" +
                  "\u0116\0\12\12\106\0\12\12\u0746\0\12\12\46\0\12\12\u012c\0\12\12" +
                  "\200\0\12\12\246\0\12\12\6\0\12\12\266\0\12\12\126\0\12\12" +
                  "\206\0\12\12\6\0\12\12\u03ce\0\2\14\u85f6\0\12\12\u02a6\0\12\12" +
                  "\46\0\12\12\306\0\12\12\166\0\12\12\u0196\0\12\12\u5316\0\12\12" +
                  "\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\1\2\0\1\2\1\3\1\4\1\1\1\4\1\3" +
                  "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13" +
                  "\1\14\1\15\1\16\1\17\1\4\1\20\1\4\1\21" +
                  "\2\22\1\23\1\21\1\24\1\2\1\24\1\0\2\25" +
                  "\1\0\1\26\2\0\1\27\1\0\1\27\2\0\2\30" +
                  "\1\31\2\0\2\27";

  private static int[] zzUnpackAction() {
    int[] result = new int[52];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\266" +
                  "\0\320\0\352\0\202\0\u0104\0\u011e\0\u0138\0\u0152\0\u016c" +
                  "\0\u0186\0\u01a0\0\u01ba\0\202\0\202\0\202\0\u01d4\0\202" +
                  "\0\u01ee\0\202\0\202\0\u0208\0\202\0\u0222\0\202\0\u023c" +
                  "\0\u0256\0\234\0\202\0\234\0\u0270\0\u028a\0\u02a4\0\u02be" +
                  "\0\202\0\u02d8\0\u02f2\0\u030c\0\u01ee\0\202\0\u01ee\0\202" +
                  "\0\u0326\0\u0340\0\u0326\0\u0340";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[52];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\13" +
                  "\6\6\1\15\1\16\1\17\1\20\1\21\1\22\1\23" +
                  "\1\24\1\25\1\26\1\27\1\30\1\6\1\7\1\10" +
                  "\1\11\1\12\1\31\1\14\1\13\6\6\1\15\1\16" +
                  "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
                  "\1\27\1\30\2\32\1\33\5\32\1\34\1\33\2\32" +
                  "\1\33\7\32\1\35\15\32\1\36\23\32\1\37\3\32" +
                  "\1\40\1\32\1\41\1\37\2\32\1\37\15\32\32\0" +
                  "\2\42\1\43\5\42\2\44\2\42\1\44\15\42\6\0" +
                  "\1\10\26\0\1\45\2\0\1\46\27\0\1\47\33\0" +
                  "\1\14\31\0\1\15\31\0\1\16\31\0\1\17\31\0" +
                  "\1\20\31\0\1\21\25\0\1\22\3\0\1\22\1\0" +
                  "\1\22\3\0\2\22\16\0\1\23\3\0\1\23\1\0" +
                  "\1\23\3\0\2\23\15\0\1\50\1\51\1\52\2\0" +
                  "\1\52\1\0\1\53\1\51\1\54\1\52\1\51\15\0" +
                  "\2\55\1\56\5\55\2\57\2\55\1\57\15\55\2\0" +
                  "\1\33\31\0\1\32\31\0\1\37\3\0\1\40\1\0" +
                  "\1\41\1\37\2\0\1\37\17\0\1\37\32\0\1\60" +
                  "\34\0\1\46\27\0\1\60\25\0\2\50\1\61\5\50" +
                  "\2\62\2\50\1\62\15\50\1\0\1\50\1\51\3\0" +
                  "\1\52\1\0\1\53\1\51\2\0\1\51\17\0\1\51" +
                  "\30\0\1\50\1\51\1\52\2\0\1\52\1\0\1\53" +
                  "\1\51\1\0\1\52\1\51\17\0\1\51\5\0\1\53" +
                  "\1\51\2\0\1\51\15\0\2\50\1\63\5\50\2\64" +
                  "\2\50\1\64\15\50";

  private static int[] zzUnpackTrans() {
    int[] result = new int[858];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unkown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\1\2\0\1\1\1\11\4\1\1\11\10\1\3\11" +
                  "\1\1\1\11\1\1\2\11\1\1\1\11\1\1\1\11" +
                  "\2\1\1\0\1\11\1\1\1\0\1\1\2\0\1\11" +
                  "\1\0\1\1\2\0\1\11\1\1\1\11\2\0\2\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[52];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int yycolumn = 0;
    private int a = 0;
  private Stack<Integer> stack = new Stack<Integer>();

	private void retryInState(int newState) {
        yybegin(newState);
      yypushback(yylength());
    }

  private void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  private void yypopState() {
    yybegin(stack.pop());
  }

  private void yypopBackState() {
    yybegin(stack.pop());
      yypushback(yylength());
    }

    // The current indentation level.
    private int indent = -1;

  // The number of unclosed '{' and '['. `flow_level == 0` means block
  // context.
  private int flowLevel = 0;

  // Past indentation levels.
  private Stack<Integer> indents = new Stack<Integer>();

    private boolean addIndent(int column) {
        if (this.indent < column) {
            this.indents.push(this.indent);
            this.indent = column;
          return true;
        }
      return false;
    }

  private void unwindIndent(int col) {
    // In the flow context, indentation is ignored. We make the scanner less
    // restrictive then specification requires.
    if (this.flowLevel != 0) {
      return;
    }

    while (this.indent > col) {
      this.indent = this.indents.pop();
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public YamlFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos -zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
           zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
            zzR = false;
            else {
            yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn++;
        }
      }

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL - 1] : zzBufferL.charAt(zzMarkedPosL - 1))) {
          case '\n':
          case '\u000B':
          case '\u000C':
          case '\u0085':
          case '\u2028':
          case '\u2029':
            zzAtBOL = true;
            break;
          case '\r':
            if (zzMarkedPosL < zzEndReadL)
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
            else if (zzAtEOF)
            zzAtBOL = false;
            else {
              boolean eof = zzRefill();
              zzMarkedPosL = zzMarkedPos;
              zzEndReadL = zzEndRead;
              zzBufferL = zzBuffer;
              if (eof)
                zzAtBOL = false;
              else
                zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
            }
            break;
          default:
            zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [154] { return YAML_Tag; }");
        {
          return YAML_Tag;
        }
        case 26:
          break;
        case 3:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [185] { yypushState(IN_PLAIN); }");
        {
          yypushState(IN_PLAIN);
        }
        case 27:
          break;
        case 20:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [199] { a=401; }");
        {
          a = 401;
        }
        case 28:
          break;
        case 22:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [110] { addIndent(yycolumn); return YAML_BlockEntry; }");
        {
          addIndent(yycolumn);
          return YAML_BlockEntry;
        }
        case 29:
          break;
        case 11:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext() + "--");
          System.out.println("action [125] { // KEY(flow context): \'?\'" + ZZ_NL + "                                    if (this.flowLevel != 0) {" + ZZ_NL + "                                        return YAML_Key;" + ZZ_NL + "                                    } else {" + ZZ_NL + "                                        // KEY(block context): \'?\' (\' \'|\'\\n\')" + ZZ_NL + "                                        if (yylength()>1)" + ZZ_NL + "                                            return YAML_Key;" + ZZ_NL + "                                    } }");
        { // KEY(flow context): '?'
          if (this.flowLevel != 0) {
            return YAML_Key;
          } else {
            // KEY(block context): '?' (' '|'\n')
            if (yylength() > 1)
              return YAML_Key;
          }
        }
        case 30:
          break;
        case 21:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [98] { return YAML_Comment; }");
        {
          return YAML_Comment;
        }
        case 31:
          break;
        case 23:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext() + "--");
          System.out.println("action [158] { if (this.flowLevel == 0)" + ZZ_NL + "          {" + ZZ_NL + "            // Hacky hold the current indent to compare inside IN_BLOCK" + ZZ_NL + "            this.indents.push(yycolumn - yylength());" + ZZ_NL + "            yypushState(IN_BLOCK_SCALAR);" + ZZ_NL + "            return YAML_Scalar;" + ZZ_NL + "          } }");
        {
          if (this.flowLevel == 0) {
            // Hacky hold the current indent to compare inside IN_BLOCK
            this.indents.push(yycolumn - yylength());
            yypushState(IN_BLOCK_SCALAR);
            return YAML_Scalar;
          }
        }
        case 32:
          break;
        case 7:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [115] { this.flowLevel--; return YAML_FlowSequenceEnd; }");
        {
          this.flowLevel--;
          return YAML_FlowSequenceEnd;
        }
        case 33:
          break;
        case 13:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [148] { return YAML_Alias; }");
        {
          return YAML_Alias;
        }
        case 34:
          break;
        case 8:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [118] { this.flowLevel++; return YAML_FlowMappingStart; }");
        {
          this.flowLevel++;
          return YAML_FlowMappingStart;
        }
        case 35:
          break;
        case 19:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [192] { a=308; yypopBackState(); return YAML_Scalar; }");
        {
          a = 308;
          yypopBackState();
          return YAML_Scalar;
        }
        case 36:
          break;
        case 6:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [113] { this.flowLevel++; return YAML_FlowSequenceStart; }");
        {
          this.flowLevel++;
          return YAML_FlowSequenceStart;
        }
        case 37:
          break;
        case 1:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [101] { a=101; unwindIndent(yycolumn); return YAML_Whitespace; }");
        {
          a = 101;
          unwindIndent(yycolumn);
          return YAML_Whitespace;
        }
        case 38:
          break;
        case 9:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [119] { this.flowLevel--; return YAML_FlowMappingEnd; }");
        {
          this.flowLevel--;
          return YAML_FlowMappingEnd;
        }
        case 39:
          break;
        case 2:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext() + "--");
          System.out.println("action [200] { a=402;" + ZZ_NL + "            if (yylength() < this.indents.peek() || yylength() == 0)" + ZZ_NL + "            { // End of block scalar" + ZZ_NL + "                a=403; yypopBackState(); this.indents.pop(); return YAML_Scalar;" + ZZ_NL + "            } }");
        {
          a = 402;
          if (yylength() < this.indents.peek() || yylength() == 0) { // End of block scalar
            a = 403;
            yypopBackState();
            this.indents.pop();
            return YAML_Scalar;
          }
        }
        case 40:
          break;
        case 10:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [122] { return YAML_FlowEntry; }");
        {
          return YAML_FlowEntry;
        }
        case 41:
          break;
        case 24:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [104] { unwindIndent(-1); return YAML_Directive; }");
        {
          unwindIndent(-1);
          return YAML_Directive;
        }
        case 42:
          break;
        case 4:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [188] { return YAML_Error; }");
        {
          return YAML_Error;
        }
        case 43:
          break;
        case 25:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [107] { unwindIndent(-1); return YAML_DocumentStart; }");
        {
          unwindIndent(-1);
          return YAML_DocumentStart;
        }
        case 44:
          break;
        case 18:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [193] { a=307; yypopBackState(); return YAML_Scalar; }");
        {
          a = 307;
          yypopBackState();
          return YAML_Scalar;
        }
        case 45:
          break;
        case 5:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [97] { a=100; return YAML_Whitespace; }");
        {
          a = 100;
          return YAML_Whitespace;
        }
        case 46:
          break;
        case 12:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext() + "--");
          System.out.println("action [137] { // VALUE(flow context): \'?\'" + ZZ_NL + "                                    if (this.flowLevel != 0) {" + ZZ_NL + "                                        return YAML_Value;" + ZZ_NL + "                                    } else {" + ZZ_NL + "                                        // VALUE(block context): \'?\' (\' \'|\'\\n\')" + ZZ_NL + "                                        if (yylength()>1)" + ZZ_NL + "                                            return YAML_Value;" + ZZ_NL + "                                    } }");
        { // VALUE(flow context): '?'
          if (this.flowLevel != 0) {
            return YAML_Value;
          } else {
            // VALUE(block context): '?' (' '|'\n')
            if (yylength() > 1)
              return YAML_Value;
          }
        }
        case 47:
          break;
        case 14:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [151] { return YAML_Anchor; }");
        {
          return YAML_Anchor;
        }
        case 48:
          break;
        case 17:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [195] {  }");
        {
        }
        case 49:
          break;
        case 16:
          System.out.println("col: " + (yycolumn + 1) + " " + "match: --" + yytext()+"--");
          System.out.println("action [180] { return YAML_Scalar; }");
        {
          return YAML_Scalar;
        }
        case 50: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
              case IN_BLOCK_SCALAR: {
                System.out.println("col: " + (yycolumn + 1) + " " + "match: <<EOF>>");
                System.out.println("action [207] { a=407; yypopBackState(); this.indents.pop(); return YAML_Scalar; }");
                a = 407;
                yypopBackState();
                this.indents.pop();
                return YAML_Scalar;
              }
              case 53:
                break;
              case IN_PLAIN: {
                System.out.println("col: " + (yycolumn + 1) + " " + "match: <<EOF>>");
                System.out.println("action [194] { a=307; yypopBackState(); return YAML_Scalar; }");
                a = 307;
                yypopBackState();
                return YAML_Scalar;
              }
              case 54:
                break;
              default:
                return null;
            }
          } else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java YamlFlexLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        YamlFlexLexer scanner = null;
        try {
          scanner = new YamlFlexLexer(new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        } catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \"" + argv[i] + "\"");
        } catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
