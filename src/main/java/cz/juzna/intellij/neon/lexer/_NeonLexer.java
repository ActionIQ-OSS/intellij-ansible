/* The following code was generated by JFlex 1.4.3 on 15.18.5 12:56 */

package cz.juzna.intellij.neon.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static cz.juzna.intellij.neon.lexer.NeonTokenTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15.18.5 12:56 from the specification file
 * <tt>C:/Users/Pavels.Veretennikovs/IdeaProjects/intellij-neon/src/main/java/cz/juzna/intellij/neon/lexer/neon.flex</tt>
 */
public class _NeonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int IN_ASSIGNMENT_LITERAL = 6;
  public static final int IN_LITERAL = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_ASSIGNMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\26\1\10\1\2\2\14\1\15\22\26\1\10\1\11\1\3\1\5"+
    "\1\0\1\7\1\0\1\1\1\21\1\22\2\0\1\20\1\6\14\0"+
    "\1\16\2\0\1\12\35\0\1\25\1\4\1\17\2\0\1\11\32\0"+
    "\1\23\1\0\1\24\7\0\1\13\u1fa2\0\2\13\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\2\1\4\1\1\1\5"+
    "\1\2\1\1\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\17\1\16\1\20\2\17\1\21"+
    "\1\22\1\23\1\24\1\25\1\0\1\26\1\0\1\27"+
    "\2\0\1\30\1\0\2\30\3\31\1\32\1\33\1\15"+
    "\1\26\1\16\1\0\2\34\1\35\2\36\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241"+
    "\0\270\0\317\0\346\0\375\0\u0114\0\u012b\0\u0114\0\u0114"+
    "\0\u0114\0\u0114\0\u0142\0\u0159\0\u0114\0\u0170\0\u0187\0\u0114"+
    "\0\u019e\0\u01b5\0\u0114\0\212\0\270\0\u0114\0\u01cc\0\u0114"+
    "\0\u01e3\0\u0114\0\163\0\u0114\0\212\0\u0114\0\270\0\u01fa"+
    "\0\u0114\0\u0211\0\163\0\u0228\0\u0114\0\163\0\u023f\0\u0114"+
    "\0\u0114\0\u0256\0\u0256\0\u0114\0\u019e\0\u0114\0\u026d\0\u0114"+
    "\0\u0284\0\u029b\0\u029b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\6\1\12\1\13\1\6"+
    "\1\14\2\15\1\6\2\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\15\1\6\1\7\1\10"+
    "\1\11\1\6\1\12\1\13\1\26\1\14\2\15\1\6"+
    "\2\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\15\2\27\1\30\5\27\1\31\3\27\2\30"+
    "\1\32\4\30\1\27\1\30\1\27\1\30\1\33\1\34"+
    "\1\30\1\35\1\33\1\30\2\33\2\30\1\36\1\33"+
    "\2\30\1\33\10\30\2\37\1\40\5\37\1\41\1\37"+
    "\1\42\1\37\7\40\3\37\1\40\1\43\3\0\1\43"+
    "\1\0\2\43\2\0\1\44\1\43\2\0\1\43\10\0"+
    "\1\45\1\46\1\0\24\45\10\0\1\10\16\0\2\47"+
    "\1\0\1\46\1\50\22\47\2\12\1\0\24\12\1\43"+
    "\1\0\1\51\1\0\1\43\1\0\1\52\1\43\1\51"+
    "\1\0\1\44\1\53\1\51\1\54\1\43\20\0\1\14"+
    "\45\0\1\43\1\0\1\55\1\0\1\43\1\0\2\43"+
    "\1\55\1\0\1\44\1\56\1\55\1\57\1\43\2\55"+
    "\1\0\1\55\1\0\1\55\25\0\1\60\27\0\1\61"+
    "\2\0\1\26\1\62\1\0\1\62\1\26\1\62\2\26"+
    "\2\62\1\63\1\26\2\62\1\26\10\62\2\27\1\0"+
    "\5\27\1\0\3\27\7\0\1\27\1\0\1\27\1\0"+
    "\2\64\1\0\2\64\1\0\2\64\1\65\3\64\7\0"+
    "\1\64\1\0\1\64\3\0\1\30\5\0\1\30\2\0"+
    "\2\66\1\67\1\0\2\30\1\0\1\30\1\0\1\30"+
    "\2\0\2\37\1\0\5\37\1\0\1\37\1\0\1\37"+
    "\7\0\3\37\1\0\2\70\1\0\2\70\1\0\2\70"+
    "\1\41\1\70\1\0\1\70\7\0\3\70\1\0\2\47"+
    "\1\0\24\47\1\43\3\0\1\43\1\0\1\71\1\43"+
    "\2\0\1\44\1\43\2\0\1\43\12\0\1\51\26\0"+
    "\1\55\24\0\2\62\1\0\24\62\2\0\1\66\24\0"+
    "\1\71\1\72\1\0\1\72\1\71\1\72\2\71\2\72"+
    "\1\73\1\71\2\72\1\71\12\72\1\0\24\72";

  private static int [] zzUnpackTrans() {
    int [] result = new int[690];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\7\1\1\11\1\1\4\11\2\1\1\11\2\1"+
    "\1\11\2\1\1\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\2\1\1\11\2\1\2\11\2\1\1\11\1\0\1\11"+
    "\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[59];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int yycolumn = 0;
    private int a = 0;
	private void retryInState(int newState) {
        yybegin(newState);
        yypushback(yylength());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _NeonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 76) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [87] { return NEON_UNKNOWN; }");
          { return NEON_UNKNOWN;
          }
        case 31: break;
        case 24: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [55] { return NEON_ARRAY_BULLET; }");
          { return NEON_ARRAY_BULLET;
          }
        case 32: break;
        case 16: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [113] { a=3;retryInState(IN_ASSIGNMENT_LITERAL);"+ZZ_NL+"        return NEON_LITERAL; }");
          { a=3;retryInState(IN_ASSIGNMENT_LITERAL);
        return NEON_LITERAL;
          }
        case 33: break;
        case 22: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [39] { a=2;retryInState(IN_ASSIGNMENT); }");
          { a=2;retryInState(IN_ASSIGNMENT);
          }
        case 34: break;
        case 10: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [63] { return NEON_LBRACE_CURLY; }");
          { return NEON_LBRACE_CURLY;
          }
        case 35: break;
        case 12: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [67] { return NEON_LBRACE_SQUARE; }");
          { return NEON_LBRACE_SQUARE;
          }
        case 36: break;
        case 4: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [70] { return NEON_COMMENT; }");
          { return NEON_COMMENT;
          }
        case 37: break;
        case 1: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [78] { yybegin(IN_LITERAL);"+ZZ_NL+"        return NEON_LITERAL; }");
          { yybegin(IN_LITERAL);
        return NEON_LITERAL;
          }
        case 38: break;
        case 27: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [66] { return NEON_RBRACE_JINJA; }");
          { return NEON_RBRACE_JINJA;
          }
        case 39: break;
        case 13: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [47] { return NEON_TAG; }");
          { return NEON_TAG;
          }
        case 40: break;
        case 8: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [61] { return NEON_LPAREN; }");
          { return NEON_LPAREN;
          }
        case 41: break;
        case 7: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [59] { return NEON_ITEM_DELIMITER; }");
          { return NEON_ITEM_DELIMITER;
          }
        case 42: break;
        case 20: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [102] { a=6;retryInState(IN_ASSIGNMENT); }");
          { a=6;retryInState(IN_ASSIGNMENT);
          }
        case 43: break;
        case 9: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [62] { return NEON_RPAREN; }");
          { return NEON_RPAREN;
          }
        case 44: break;
        case 25: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [57] { return NEON_COLON; }");
          { return NEON_COLON;
          }
        case 45: break;
        case 18: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [104] { a=4; }");
          { a=4;
          }
        case 46: break;
        case 6: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [68] { return NEON_RBRACE_SQUARE; }");
          { return NEON_RBRACE_SQUARE;
          }
        case 47: break;
        case 29: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [105] { a=5; retryInState(IN_ASSIGNMENT); }");
          { a=5; retryInState(IN_ASSIGNMENT);
          }
        case 48: break;
        case 23: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [43] { return NEON_STRING; }");
          { return NEON_STRING;
          }
        case 49: break;
        case 11: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [64] { return NEON_RBRACE_CURLY; }");
          { return NEON_RBRACE_CURLY;
          }
        case 50: break;
        case 26: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [65] { return NEON_LBRACE_JINJA; }");
          { return NEON_LBRACE_JINJA;
          }
        case 51: break;
        case 28: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [96] { retryInState(YYINITIAL); }");
          { retryInState(YYINITIAL);
          }
        case 52: break;
        case 15: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [98] { retryInState(YYINITIAL); }");
          { retryInState(YYINITIAL);
          }
        case 53: break;
        case 3: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [74] { return NEON_INDENT; }");
          { return NEON_INDENT;
          }
        case 54: break;
        case 21: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [103] { a=1;retryInState(IN_ASSIGNMENT); }");
          { a=1;retryInState(IN_ASSIGNMENT);
          }
        case 55: break;
        case 19: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [106] { a=4;retryInState(IN_ASSIGNMENT); }");
          { a=4;retryInState(IN_ASSIGNMENT);
          }
        case 56: break;
        case 17: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [111] { return NEON_ASSIGNMENT; }");
          { return NEON_ASSIGNMENT;
          }
        case 57: break;
        case 5: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [83] { return NEON_WHITESPACE; }");
          { return NEON_WHITESPACE;
          }
        case 58: break;
        case 30: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [51] { return NEON_HEADER; }");
          { return NEON_HEADER;
          }
        case 59: break;
        case 14: 
          System.out.println("col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [93] {  }");
          { 
          }
        case 60: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _NeonLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        _NeonLexer scanner = null;
        try {
          scanner = new _NeonLexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
