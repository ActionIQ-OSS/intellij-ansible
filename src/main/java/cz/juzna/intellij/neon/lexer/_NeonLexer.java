/* The following code was generated by JFlex 1.4.3 on 15.19.5 16:25 */

package cz.juzna.intellij.neon.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static cz.juzna.intellij.neon.lexer.NeonTokenTypes.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 15.19.5 16:25 from the specification file
 * <tt>C:/Users/Pavels.Veretennikovs/IdeaProjects/intellij-neon/src/main/java/cz/juzna/intellij/neon/lexer/neon.flex</tt>
 */
public class _NeonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_ASSIGNMENT_LITERAL = 6;
  public static final int IN_LITERAL = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_ASSIGNMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\16\1\10\1\2\2\21\1\17\16\16\4\33\1\10\1\11\1\3"+
    "\1\5\1\14\1\7\1\0\1\1\1\30\1\31\2\0\1\26\1\6"+
    "\2\0\12\15\1\24\2\0\1\23\1\27\2\0\32\14\1\32\1\4"+
    "\1\25\1\0\1\14\1\11\32\14\1\12\1\0\1\13\1\0\6\15"+
    "\1\22\32\15\2\0\4\14\4\0\1\14\2\0\1\15\7\0\1\14"+
    "\4\0\1\14\5\0\27\14\1\0\37\14\1\0\u01ca\14\4\0\14\14"+
    "\16\0\5\14\7\0\1\14\1\0\1\14\21\0\160\15\5\14\1\0"+
    "\2\14\2\0\4\14\10\0\1\14\1\0\3\14\1\0\1\14\1\0"+
    "\24\14\1\0\123\14\1\0\213\14\1\0\5\15\2\0\236\14\11\0"+
    "\46\14\2\0\1\14\7\0\47\14\7\0\1\14\1\0\55\15\1\0"+
    "\1\15\1\0\2\15\1\0\2\15\1\0\1\15\10\0\33\14\5\0"+
    "\3\14\15\0\5\15\6\0\1\14\4\0\13\15\5\0\53\14\37\15"+
    "\4\0\2\14\1\15\143\14\1\0\1\14\10\15\1\0\6\15\2\14"+
    "\2\15\1\0\4\15\2\14\12\15\3\14\2\0\1\14\17\0\1\15"+
    "\1\14\1\15\36\14\33\15\2\0\131\14\13\15\1\14\16\0\12\15"+
    "\41\14\11\15\2\14\4\0\1\14\5\0\26\14\4\15\1\14\11\15"+
    "\1\14\3\15\1\14\5\15\22\0\31\14\3\15\104\0\1\14\1\0"+
    "\13\14\67\0\33\15\1\0\4\15\66\14\3\15\1\14\22\15\1\14"+
    "\7\15\12\14\2\15\2\0\12\15\1\0\7\14\1\0\7\14\1\0"+
    "\3\15\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0"+
    "\1\14\3\0\4\14\2\0\1\15\1\14\7\15\2\0\2\15\2\0"+
    "\3\15\1\14\10\0\1\15\4\0\2\14\1\0\3\14\2\15\2\0"+
    "\12\15\4\14\7\0\1\14\5\0\3\15\1\0\6\14\4\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\2\14\1\0\2\14\1\0\2\14"+
    "\2\0\1\15\1\0\5\15\4\0\2\15\2\0\3\15\3\0\1\15"+
    "\7\0\4\14\1\0\1\14\7\0\14\15\3\14\1\15\13\0\3\15"+
    "\1\0\11\14\1\0\3\14\1\0\26\14\1\0\7\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\15\1\14\10\15\1\0\3\15\1\0\3\15"+
    "\2\0\1\14\17\0\2\14\2\15\2\0\12\15\1\0\1\14\17\0"+
    "\3\15\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\15\1\14\7\15\2\0\2\15\2\0"+
    "\3\15\10\0\2\15\4\0\2\14\1\0\3\14\2\15\2\0\12\15"+
    "\1\0\1\14\20\0\1\15\1\14\1\0\6\14\3\0\3\14\1\0"+
    "\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0"+
    "\3\14\3\0\14\14\4\0\5\15\3\0\3\15\1\0\4\15\2\0"+
    "\1\14\6\0\1\15\16\0\12\15\11\0\1\14\7\0\3\15\1\0"+
    "\10\14\1\0\3\14\1\0\27\14\1\0\12\14\1\0\5\14\3\0"+
    "\1\14\7\15\1\0\3\15\1\0\4\15\7\0\2\15\1\0\2\14"+
    "\6\0\2\14\2\15\2\0\12\15\22\0\2\15\1\0\10\14\1\0"+
    "\3\14\1\0\27\14\1\0\12\14\1\0\5\14\2\0\1\15\1\14"+
    "\7\15\1\0\3\15\1\0\4\15\7\0\2\15\7\0\1\14\1\0"+
    "\2\14\2\15\2\0\12\15\1\0\2\14\17\0\2\15\1\0\10\14"+
    "\1\0\3\14\1\0\51\14\2\0\1\14\7\15\1\0\3\15\1\0"+
    "\4\15\1\14\10\0\1\15\10\0\2\14\2\15\2\0\12\15\12\0"+
    "\6\14\2\0\2\15\1\0\22\14\3\0\30\14\1\0\11\14\1\0"+
    "\1\14\2\0\7\14\3\0\1\15\4\0\6\15\1\0\1\15\1\0"+
    "\10\15\22\0\2\15\15\0\60\14\1\15\2\14\7\15\4\0\10\14"+
    "\10\15\1\0\12\15\47\0\2\14\1\0\1\14\2\0\2\14\1\0"+
    "\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0\3\14\1\0"+
    "\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\15\2\14\6\15"+
    "\1\0\2\15\1\14\2\0\5\14\1\0\1\14\1\0\6\15\2\0"+
    "\12\15\2\0\4\14\40\0\1\14\27\0\2\15\6\0\12\15\13\0"+
    "\1\15\1\0\1\15\1\0\1\15\4\0\2\15\10\14\1\0\44\14"+
    "\4\0\24\15\1\0\2\15\5\14\13\15\1\0\44\15\11\0\1\15"+
    "\71\0\53\14\24\15\1\14\12\15\6\0\6\14\4\15\4\14\3\15"+
    "\1\14\3\15\2\14\7\15\3\14\4\15\15\14\14\15\1\14\17\15"+
    "\2\0\46\14\1\0\1\14\5\0\1\14\2\0\53\14\1\0\u014d\14"+
    "\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\51\14"+
    "\1\0\4\14\2\0\41\14\1\0\4\14\2\0\7\14\1\0\1\14"+
    "\1\0\4\14\2\0\17\14\1\0\71\14\1\0\4\14\2\0\103\14"+
    "\2\0\3\15\40\0\20\14\20\0\125\14\14\0\u026c\14\2\0\21\14"+
    "\1\0\32\14\5\0\113\14\3\0\3\14\17\0\15\14\1\0\4\14"+
    "\3\15\13\0\22\14\3\15\13\0\22\14\2\15\14\0\15\14\1\0"+
    "\3\14\1\0\2\15\14\0\64\14\40\15\3\0\1\14\3\0\2\14"+
    "\1\15\2\0\12\15\41\0\3\15\2\0\12\15\6\0\130\14\10\0"+
    "\51\14\1\15\1\14\5\0\106\14\12\0\35\14\3\0\14\15\4\0"+
    "\14\15\12\0\12\15\36\14\2\0\5\14\13\0\54\14\4\0\21\15"+
    "\7\14\2\15\6\0\12\15\46\0\27\14\5\15\4\0\65\14\12\15"+
    "\1\0\35\15\2\0\13\15\6\0\12\15\15\0\1\14\130\0\5\15"+
    "\57\14\21\15\7\14\4\0\12\15\21\0\11\15\14\0\3\15\36\14"+
    "\15\15\2\14\12\15\54\14\16\15\14\0\44\14\24\15\10\0\12\15"+
    "\3\0\3\14\12\15\44\14\122\0\3\15\1\0\25\15\4\14\1\15"+
    "\4\14\3\15\2\14\11\0\300\14\47\15\25\0\4\15\u0116\14\2\0"+
    "\6\14\2\0\46\14\2\0\6\14\2\0\10\14\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\37\14\2\0\65\14\1\0\7\14\1\0"+
    "\1\14\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14\4\0"+
    "\15\14\5\0\3\14\1\0\7\14\16\0\5\15\30\0\2\20\5\15"+
    "\20\0\2\14\23\0\1\14\13\0\5\15\5\0\6\15\1\0\1\14"+
    "\15\0\1\14\20\0\15\14\3\0\33\14\25\0\15\15\4\0\1\15"+
    "\3\0\14\15\21\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14"+
    "\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14"+
    "\1\0\13\14\2\0\4\14\5\0\5\14\4\0\1\14\21\0\51\14"+
    "\u0a77\0\57\14\1\0\57\14\1\0\205\14\6\0\4\14\3\15\2\14"+
    "\14\0\46\14\1\0\1\14\5\0\1\14\2\0\70\14\7\0\1\14"+
    "\17\0\1\15\27\14\11\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\40\15\57\0\1\14\u01d5\0\3\14\31\0\11\14\6\15\1\0\5\14"+
    "\2\0\5\14\4\0\126\14\2\0\2\15\2\0\3\14\1\0\132\14"+
    "\1\0\4\14\5\0\51\14\3\0\136\14\21\0\33\14\65\0\20\14"+
    "\u0200\0\u19b6\14\112\0\u51cd\14\63\0\u048d\14\103\0\56\14\2\0\u010d\14"+
    "\3\0\20\14\12\15\2\14\24\0\57\14\1\15\4\0\12\15\1\0"+
    "\31\14\7\0\1\15\120\14\2\15\45\0\11\14\2\0\147\14\2\0"+
    "\4\14\1\0\4\14\14\0\13\14\115\0\12\14\1\15\3\14\1\15"+
    "\4\14\1\15\27\14\5\15\20\0\1\14\7\0\64\14\14\0\2\15"+
    "\62\14\21\15\13\0\12\15\6\0\22\15\6\14\3\0\1\14\4\0"+
    "\12\15\34\14\10\15\2\0\27\14\15\15\14\0\35\14\3\0\4\15"+
    "\57\14\16\15\16\0\1\14\12\15\46\0\51\14\16\15\11\0\3\14"+
    "\1\15\10\14\2\15\2\0\12\15\6\0\27\14\3\0\1\14\1\15"+
    "\4\0\60\14\1\15\1\14\3\15\2\14\2\15\5\14\2\15\1\14"+
    "\1\15\1\14\30\0\3\14\2\0\13\14\5\15\2\0\3\14\2\15"+
    "\12\0\6\14\2\0\6\14\2\0\6\14\11\0\7\14\1\0\7\14"+
    "\221\0\43\14\10\15\1\0\2\15\2\0\12\15\6\0\u2ba4\14\14\0"+
    "\27\14\4\0\61\14\u2104\0\u016e\14\2\0\152\14\46\0\7\14\14\0"+
    "\5\14\5\0\1\14\1\15\12\14\1\0\15\14\1\0\5\14\1\0"+
    "\1\14\1\0\2\14\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0"+
    "\100\14\2\0\66\14\50\0\15\14\3\0\20\15\20\0\7\15\14\0"+
    "\2\14\30\0\3\14\31\0\1\14\6\0\5\14\1\0\207\14\2\0"+
    "\1\15\4\0\1\14\13\0\12\15\7\0\32\14\4\0\1\14\1\0"+
    "\32\14\13\0\131\14\3\0\6\14\2\0\6\14\2\0\6\14\2\0"+
    "\3\14\3\0\2\14\3\0\2\14\22\0\3\15\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\2\1\11\1\2\1\12\1\13\1\2"+
    "\1\14\1\15\1\16\1\17\1\20\4\21\1\22\2\23"+
    "\1\24\1\23\1\25\2\24\1\26\1\27\1\30\3\27"+
    "\1\1\2\30\1\31\1\32\1\0\1\32\1\33\1\34"+
    "\1\0\1\35\2\36\1\37\1\0\1\37\1\40\3\0"+
    "\1\41\1\42\2\43\1\0\1\44\2\0\1\45\1\46"+
    "\4\0\1\47\1\50\1\0\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\214\0\u0118\0\u0134\0\u0150\0\214\0\u016c"+
    "\0\214\0\214\0\u0188\0\214\0\214\0\214\0\u01a4\0\u01c0"+
    "\0\214\0\u01dc\0\u01f8\0\u0214\0\u0230\0\214\0\u024c\0\214"+
    "\0\u0268\0\u0284\0\u02a0\0\u02bc\0\214\0\214\0\214\0\u02d8"+
    "\0\u02f4\0\u0310\0\u032c\0\u0348\0\u032c\0\214\0\214\0\u0364"+
    "\0\u0380\0\214\0\214\0\u0150\0\214\0\214\0\u039c\0\214"+
    "\0\u0188\0\u03b8\0\214\0\u01dc\0\u01f8\0\u0214\0\214\0\214"+
    "\0\u03d4\0\214\0\u024c\0\214\0\u0268\0\u03f0\0\214\0\214"+
    "\0\u02d8\0\u02f4\0\u0310\0\u040c\0\214\0\u0428\0\u0444\0\214";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\6\1\7\2\6\1\10\1\11\1\6\1\12\1\13"+
    "\1\14\1\15\1\16\1\6\2\13\1\6\1\13\1\6"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\13\2\6\1\7\2\6\1\10\1\11\1\27\1\12"+
    "\1\13\1\14\1\15\1\16\1\6\2\13\1\6\1\13"+
    "\1\6\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\13\2\30\1\31\5\30\1\32\1\30\1\33"+
    "\1\34\2\30\2\31\1\30\1\31\2\30\1\35\2\31"+
    "\4\30\1\31\1\36\1\37\1\40\1\41\1\36\1\40"+
    "\2\36\1\42\1\40\1\43\1\44\2\36\2\40\1\36"+
    "\1\40\1\36\1\45\1\36\2\40\1\36\4\40\2\46"+
    "\1\47\5\46\1\50\1\46\1\51\1\52\3\53\1\54"+
    "\2\47\1\55\1\56\10\46\44\0\1\7\23\0\2\10"+
    "\1\0\31\10\2\0\1\57\3\0\1\60\1\0\1\57"+
    "\6\0\1\61\3\57\21\0\1\12\35\0\1\62\34\0"+
    "\1\63\34\0\3\64\3\0\1\64\1\65\12\0\1\66"+
    "\5\0\1\66\2\0\1\66\3\0\1\67\3\66\2\0"+
    "\2\66\2\0\1\66\4\0\1\70\5\0\1\71\6\0"+
    "\1\72\3\70\11\0\2\27\1\0\31\27\2\30\1\0"+
    "\5\30\1\0\1\30\2\0\2\30\2\0\1\30\1\0"+
    "\2\30\3\0\4\30\1\0\2\73\1\0\2\73\1\0"+
    "\2\73\1\74\1\73\1\75\1\76\2\73\2\0\1\73"+
    "\1\0\2\73\3\0\4\73\13\0\1\77\34\0\1\77"+
    "\22\0\1\100\5\0\1\100\2\0\1\100\3\0\1\101"+
    "\3\102\2\0\2\100\2\0\1\100\2\0\1\103\1\104"+
    "\1\0\31\103\2\105\1\0\1\104\1\106\27\105\10\0"+
    "\1\42\35\0\1\107\34\0\1\110\30\0\1\111\1\0"+
    "\1\112\1\113\1\114\31\0\1\115\34\0\1\115\34\0"+
    "\3\53\3\0\1\53\13\0\1\47\37\0\1\116\27\0"+
    "\1\57\33\0\1\66\33\0\1\70\33\0\1\102\31\0"+
    "\2\105\1\0\31\105\10\0\1\117\3\0\3\114\3\0"+
    "\1\114\1\120\10\0\2\116\1\0\31\116\10\0\1\117"+
    "\12\0\1\120\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1120];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\11\4\1\1\11\3\1\1\11\1\1"+
    "\2\11\1\1\3\11\2\1\1\11\4\1\1\11\1\1"+
    "\1\11\4\1\3\11\6\1\2\11\1\0\1\1\2\11"+
    "\1\0\2\11\1\1\1\11\1\0\1\1\1\11\3\0"+
    "\2\11\1\1\1\11\1\0\1\11\2\0\2\11\4\0"+
    "\1\11\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int yycolumn = 0;
    private int a = 0;
	private void retryInState(int newState) {
        yybegin(newState);
        yypushback(yylength());
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _NeonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { a=305;retryInState(YYINITIAL);
          }
        case 42: break;
        case 27: 
          { a=111;return NEON_LBRACE_JINJA;
          }
        case 43: break;
        case 40: 
          { return NEON_HEADER;
          }
        case 44: break;
        case 37: 
          { a=411;return NEON_LBRACE_JINJA;
          }
        case 45: break;
        case 29: 
          { a=2;retryInState(IN_ASSIGNMENT);
          }
        case 46: break;
        case 39: 
          { a=5011;retryInState(IN_ASSIGNMENT);
          }
        case 47: break;
        case 20: 
          { a=406;retryInState(YYINITIAL);
          }
        case 48: break;
        case 4: 
          { return NEON_COMMENT;
          }
        case 49: break;
        case 14: 
          { return NEON_LBRACE_SQUARE;
          }
        case 50: break;
        case 26: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return NEON_ARRAY_BULLET;
          }
        case 51: break;
        case 7: 
          { return NEON_LBRACE_CURLY;
          }
        case 52: break;
        case 19: 
          { a=405;retryInState(IN_ASSIGNMENT_LITERAL);
        return NEON_LITERAL;
          }
        case 53: break;
        case 15: 
          { return NEON_TAG;
          }
        case 54: break;
        case 6: 
          { return NEON_UNKNOWN;
          }
        case 55: break;
        case 34: 
          { a=304;retryInState(YYINITIAL);
          }
        case 56: break;
        case 21: 
          { a=403;return NEON_WHITESPACE;
          }
        case 57: break;
        case 9: 
          { return NEON_ASSIGNMENT;
          }
        case 58: break;
        case 30: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return NEON_COLON;
          }
        case 59: break;
        case 2: 
          { yybegin(IN_LITERAL);
        return NEON_LITERAL;
          }
        case 60: break;
        case 8: 
          { return NEON_RBRACE_CURLY;
          }
        case 61: break;
        case 28: 
          { a=112;return NEON_RBRACE_JINJA;
          }
        case 62: break;
        case 36: 
          { a=401;return NEON_STRING;
          }
        case 63: break;
        case 38: 
          { a=412;return NEON_RBRACE_JINJA;
          }
        case 64: break;
        case 17: 
          { a=307;retryInState(YYINITIAL);
          }
        case 65: break;
        case 32: 
          { a=303;
          }
        case 66: break;
        case 18: 
          { a=306;
          }
        case 67: break;
        case 5: 
          { return NEON_WHITESPACE;
          }
        case 68: break;
        case 3: 
          { return NEON_INDENT;
          }
        case 69: break;
        case 10: 
          { return NEON_RBRACE_SQUARE;
          }
        case 70: break;
        case 41: 
          { a=501; retryInState(IN_ASSIGNMENT);
          }
        case 71: break;
        case 23: 
          { a=505;
          }
        case 72: break;
        case 22: 
          { a=402;return NEON_ASSIGNMENT;
          }
        case 73: break;
        case 25: 
          { a=502; retryInState(IN_ASSIGNMENT);
          }
        case 74: break;
        case 11: 
          { return NEON_ITEM_DELIMITER;
          }
        case 75: break;
        case 12: 
          { return NEON_LPAREN;
          }
        case 76: break;
        case 13: 
          { return NEON_RPAREN;
          }
        case 77: break;
        case 16: 
          { a=302;
          }
        case 78: break;
        case 33: 
          { a=3011;retryInState(YYINITIAL);
          }
        case 79: break;
        case 31: 
          { return NEON_LINE_CONTINUATION;
          }
        case 80: break;
        case 1: 
          { a=504;
          }
        case 81: break;
        case 24: 
          { a=503;retryInState(IN_ASSIGNMENT);
          }
        case 82: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
